# -*- coding: utf-8 -*-
"""naive_sharding.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YRbsQ6faNhm45FJuNPBc-lJu0-lLwlq7
"""

from math import sqrt, floor
import numpy as np

def naive_sharding(ds, centers):
    
    n = np.shape(ds)[1]
    m = np.shape(ds)[0]
    centroids = np.mat(np.zeros((centers,n)))


    cluster = np.mat(np.sum(ds, axis=1))
    ds = np.append(cluster.T, ds, axis=1)
    ds.sort(axis=0)


    step = floor(m/centers)

  
    vfunc = np.vectorize(_get_mean)

 
    for j in range(centers):
        if j == k-1:
            centroids[j:] = vfunc(np.sum(ds[j*step:,1:], axis=0), step)
        else:
            centroids[j:] = vfunc(np.sum(ds[j*step:(j+1)*step,1:], axis=0), step)

    return centroids

def _get_mean(sums, step):
  

    return sums/step