# -*- coding: utf-8 -*-
"""hill search.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_SU79V2MXf4wJrJ_EdYIxYRQnzG3UHxR
"""

import copy
import math
import random 

def calculateCost(state):
  cost = 0
  for i in range(0, len(state)):
    for j in range(i+1, len(state)):
      if state[j] < state[i]:
        cost = cost + 1 
  
  return cost

def isGoal(state):
  if calculateCost(state) == 0:
    return True
  else:
    return False

def moveOrNot(dele):
  exp = math.exp(dele)
  rand = random.uniform(0,1)
  if rand <= exp:
    return 1
  else:
    return 0

def genarateState(curstate, curcost):
  save = curcost
  dele = 0
  generatedstate = curstate
  for i in range(0, len(state)-1):
    newstate = copy.deepcopy(curstate)
    newstate[i] , newstate[i+1] = newstate[i+1], newstate[i]
    newcost = calculateCost(newstate)
    if newcost < curcost:
      return newstate, newcost
    elif newcost == curcost:
      dele -= 1
      if moveOrNot(dele):
        return newstate, newcost
    else:
      dele = curcost - newcost
      if moveOrNot(dele):
        return newstate, newcost
  
  return curstate, None
 
if __name__ == '__main__':
  state = [2, 1, 5, 0, 8, 4, 10, 0, 20, 10]
  cost = calculateCost(state)
  numberofstate = 0
  while isGoal(state) is not True:
    state, cost = genarateState(state, cost)
    if cost == None:
      break
    numberofstate = numberofstate + 1
  print(state)
  #print(f'Generated State -> {numberofstate}')

  def Initial():
    list = [2, 1, 5, 0, 8, 4, 10, 0, 20, 10]
    return list

  def cal_cost(state):
    cost = 0.2
    for i in range(len(state)):
      for j in range(i + 1, len(state)):
        if (state[i] > state[j]):
          cost = cost + 1;
    return cost

  def state_genaretion(current_state, current_state_cost):
    temp_current_state_cost = current_state_cost
    for i in range(len(current_state) - 1):
      temp = current_state[i + 1]
      current_state[i + 1] = current_state[i]
      current_state[i] = temp
      tempCost = cal_cost(current_state)
      if (tempCost < temp_current_state_cost):
        temp_current_state_cost = tempCost
        new_current_state = current_state

    if (cal_cost(new_current_state) < cal_cost(current_state)):
      return new_current_state, temp_current_state_cost
    else:
      return current_state, None

  def goalState(state):
    if (cal_cost(state) == 0):
      return True
    else:
      return False

  state = Initial()
  cost = cal_cost(state)
  while (goalState(state) != True):
    state, cost = state_genaretion(state, cost)
    if cost is None:
      break
  print(state)

  def Initial():
    list = [2, 1, 5, 0, 8, 4, 10, 0, 20, 10]
    return list

  def cal_cost(state):
    cost = 0.2
    for i in range(len(state)):
      for j in range(i + 1, len(state)):
        if (state[i] > state[j]):
          cost = cost + 1;
    return cost


  def state_genaretion(current_state, current_state_cost):
    temp_current_state_cost = current_state_cost
    for i in range(len(current_state) - 1):
      temp = current_state[i + 1]
      current_state[i + 1] = current_state[i]
      current_state[i] = temp
      tempCost = cal_cost(current_state)
      if (tempCost < temp_current_state_cost):
        temp_current_state_cost = tempCost
        new_current_state = current_state

    if (cal_cost(new_current_state) < cal_cost(current_state)):
      return new_current_state, temp_current_state_cost
    else:
      return current_state, None

  def goalState(state):
    if (cal_cost(state) == 0):
      return True
    else:
      return False

  state = Initial()
  cost = cal_cost(state)
  while (goalState(state) != True):
    state, cost = state_genaretion(state, cost)

    if cost is None:
      break

  print(state)